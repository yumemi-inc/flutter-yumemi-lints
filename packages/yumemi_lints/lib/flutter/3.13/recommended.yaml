# GENERATED CODE - DO NOT MODIFY BY HAND

include: package:yumemi_lints/flutter/3.13/all.yaml

analyzer:
  language:
    # Increase safety as much as possible.
    strict-casts: true
    strict-inference: true
    strict-raw-types: true
  errors:
    # By including all.yaml, some rules will conflict. These warnings will be addressed within this file.
    included_file_warning: ignore

    # Members annotated with `visibleForTesting` should not be referenced outside of the library in which they are declared or libraries within the test directory.
    invalid_use_of_visible_for_testing_member: error

    # Superclass members should not be unintentionally overridden, as this reduces readability.
    annotate_overrides: error

    # When using implements, you do not inherit the method body of `==`, making it nearly impossible to follow the contract of `==`.
    avoid_implementing_value_types: error

    # Parameter names in overridden methods that do not match the original method's parameter names are usually considered typos.
    avoid_renaming_method_parameters: error

    # Shadowing type parameters should not be used, as this reduces readability.
    avoid_shadowing_type_parameters: error

    # Should not reference files that do not exist for conditional imports, as this will result in possible runtime failures.
    conditional_uri_does_not_exist: error

    # When importing a package, add it as a dependency in pubspec to impose constraints on the dependency, protecting against breaking changes.
    depend_on_referenced_packages: error

    # Some file systems are not case-sensitive, so many projects require filenames to be all lowercase.
    file_names: error

    # Files in the package's lib/src directory are not public APIs and should not be imported.
    implementation_imports: error

    # Some file systems are not case-sensitive, so many projects require filenames to be all lowercase.
    library_names: error

    # Super parameter names that do not match the parameter name of the corresponding super constructor are usually considered typos.
    matching_super_parameters: error

    # When unwrapping to a generic type parameter T, using `x!` can lead to a runtime error if T is given a nullable type, so you should use `x as T` instead.
    null_check_on_nullable_type_parameter: error

    # If package names are not determined according to the rules, unexpected problems may occur.
    package_names: error

    # Recursive getters are usually considered typos.
    recursive_getters: error

    # Should not be assigned to `void`.
    void_checks: error

linter:
  rules:
    # Conflicts with enabling `avoid_types_on_closure_parameters`, `omit_local_variable_types`.
    always_specify_types: false

    # Conflicts with enabling `strict-raw-types`.
    avoid_annotating_with_dynamic: false

    # There are cases that are warned but not fixed by `dart fix`.
    cascade_invocations: false

    # Don't use Flutter-style todos.
    flutter_style_todos: false

    # May add more methods later.
    one_member_abstracts: false

    # Conflicts with enabling `prefer_single_quotes`.
    prefer_double_quotes: false

    # Using `=>` has sometimes to reduce readability.
    prefer_expression_function_bodies: false

    # Conflicts with enabling `avoid_final_parameters`.
    prefer_final_parameters: false

    # Conflicts with enabling `always_use_package_imports`.
    prefer_relative_imports: false

    # Don't often develop package.
    public_member_api_docs: false

    # Conflicts with enabling `prefer_final_locals`.
    unnecessary_final: false

    # Don't trigger warnings with methods for simple state updates, among other things.
    use_setters_to_change_properties: false
